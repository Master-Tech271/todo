{"version":3,"sources":["components/Logo/index.js","components/Header/index.js","components/Addtodo/index.js","components/Todo/index.js","App.js","serviceWorker.js","index.js"],"names":["Logo","props","className","href","Header","onClick","clearList","Addtodo","onSubmit","addTodo","type","value","task","onChange","onChangeHandler","Todo","style","textDecoration","isCompleted","cursor","updateTodo","id","removeTodo","App","state","todos","e","setState","target","preventDefault","push","Math","random","console","log","todosIndex","findIndex","todo","splice","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAWeA,G,YARF,SAAAC,GACT,OACI,yBAAKC,UAAU,QACX,uBAAGC,KAAK,KAAR,WCMGC,G,MATA,SAAAH,GACX,OACI,yBAAKC,UAAU,UACX,kBAAC,EAAD,MACA,uBAAGC,KAAK,IAAIE,QAASJ,EAAMK,WAA3B,iBCMGC,G,MAVC,SAAAN,GACZ,OACI,6BACI,0BAAMO,SAAUP,EAAMQ,SAClB,2BAAOP,UAAU,YAAYQ,KAAK,OAAOC,MAAOV,EAAMW,KAAMC,SAAUZ,EAAMa,sBCe7EC,G,MAnBF,SAAAd,GACT,OACG,wBAAIC,UAAU,YACV,0BACAc,MAAO,CACHC,eAAgBhB,EAAMiB,YAAa,eAAiB,OACpDC,OAAS,WAEbd,QAAW,WACVJ,EAAMmB,WAAWnB,EAAMoB,MANxB,IAQGpB,EAAMW,MACT,4BAAQP,QAAS,WACbJ,EAAMqB,WAAWrB,EAAMoB,KACxBnB,UAAU,kBAFb,QC0DIqB,E,4MAlEbC,MAAQ,CACNZ,KAAK,GACLa,MAAM,I,EAERX,gBAAkB,SAACY,GACjB,EAAKC,SAAS,CACZf,KAAMc,EAAEE,OAAOjB,S,EAGnBF,QAAU,SAACiB,GACTA,EAAEG,iBACF,IAAMJ,EAAQ,EAAKD,MAAMC,MACzBA,EAAMK,KAAK,CACTT,GAAIU,KAAKC,SACTpB,KAAM,EAAKY,MAAMZ,KACjBM,aAAa,IAGf,EAAKS,SAAS,CACZf,KAAM,GACNa,MAAOA,IAETQ,QAAQC,IAAI,EAAKV,MAAMC,Q,EAGzBH,WAAa,SAACD,GACZ,IAAMc,EAAa,EAAKX,MAAMC,MAAMW,WAAU,SAACC,GAAD,OAASA,EAAKhB,IAAIA,KAC1DI,EAAQ,EAAKD,MAAMC,MACzBA,EAAMa,OAAOH,EAAY,GACzB,EAAKR,SAAS,CACZF,MAAQA,K,EAIZL,WAAa,SAACC,GACZ,IAAMc,EAAa,EAAKX,MAAMC,MAAMW,WAAU,SAACC,GAAD,OAASA,EAAKhB,IAAIA,KAC1DI,EAAQ,EAAKD,MAAMC,MACzBA,EAAMU,GAAYjB,aAAc,EAChC,EAAKS,SAAS,CACZF,MAAQA,K,EAIZnB,UAAY,WACV,EAAKqB,SAAS,CACZF,MAAM,M,uDAGH,IAAD,OACN,OACE,6BACE,kBAAC,EAAD,CAAQnB,UAAWiC,KAAKjC,YACxB,yBAAKJ,UAAU,iBAEXqC,KAAKf,MAAMC,MAAMe,KAAI,SAACH,GACpB,OAAO,kBAAC,EAAD,iBAAUA,EAAV,CAAgBf,WAAY,EAAKA,WAAYF,WAAY,EAAKA,kBAI3E,kBAAC,EAAD,CAASR,KAAM2B,KAAKf,MAAMZ,KAAME,gBAAiByB,KAAKzB,gBACrDL,QAAS8B,KAAK9B,e,GA7DHgC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.c46c7d04.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst Logo = props=>{\n    return(\n        <div className=\"logo\">\n            <a href=\"#\" >TODO</a>\n        </div>\n    );\n}\n\nexport default Logo;","import React from 'react';\nimport Logo from '../Logo/index';\nimport './style.css';\nconst Header = props=>{\n    return(\n        <div className=\"header\">\n            <Logo/>\n            <a href=\"#\" onClick={props.clearList} >Clear List</a>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './style.css';\n\nconst Addtodo = props=>{\n    return(\n        <div>\n            <form onSubmit={props.addTodo}>\n                <input className=\"InputTodo\" type=\"text\" value={props.task} onChange={props.onChangeHandler}/>\n            </form>\n        </div>\n    );\n}\n\nexport default Addtodo;","import React from 'react';\nimport './style.css';\n\nconst Todo = props => {\n    return(\n       <li className=\"TodoList\">\n           <span \n           style={{\n               textDecoration: props.isCompleted? \"line-through\" : 'none',\n               cursor : 'pointer'\n           }}\n           onClick = {()=>{\n            props.updateTodo(props.id)\n        }}\n           > {props.task}</span>\n           <button onClick={()=>{\n               props.removeTodo(props.id)\n           }} className=\"RemoveTodo-btn\">X</button>\n       </li>     \n    );\n}\n\nexport default Todo;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './components/Header/index';\nimport Addtodo from './components/Addtodo';\nimport Todo from './components/Todo';\n\nclass App extends Component{\n  state = {\n    task:'',\n    todos:[]\n  }\n  onChangeHandler = (e) =>{\n    this.setState({\n      task: e.target.value\n    });\n  }\n  addTodo = (e)=>{\n    e.preventDefault();\n    const todos = this.state.todos;\n    todos.push({\n      id: Math.random(),\n      task: this.state.task,\n      isCompleted: false\n    });\n\n    this.setState({\n      task: '',\n      todos: todos\n    });\n    console.log(this.state.todos);\n  }\n  //remove task\n  removeTodo = (id) =>{\n    const todosIndex = this.state.todos.findIndex((todo)=> todo.id==id);\n    const todos = this.state.todos;\n    todos.splice(todosIndex, 1);\n    this.setState({\n      todos : todos\n    });\n  }\n  //update todo\n  updateTodo = (id)=>{\n    const todosIndex = this.state.todos.findIndex((todo)=> todo.id==id);\n    const todos = this.state.todos;\n    todos[todosIndex].isCompleted = true;\n    this.setState({\n      todos : todos\n    });\n  }\n  //clear list\n  clearList = () => {\n    this.setState({\n      todos:[]\n    })\n  }\nrender(){\n  return(\n    <div>\n      <Header clearList={this.clearList}/>\n      <div className=\"TodoContainer\">\n        {\n          this.state.todos.map((todo)=>{\n            return <Todo {...todo} removeTodo={this.removeTodo} updateTodo={this.updateTodo}/>\n          })\n        }\n      </div>\n      <Addtodo task={this.state.task} onChangeHandler={this.onChangeHandler}\n       addTodo={this.addTodo} />\n    </div>\n  );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}